// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"

  runtime                = "workerd"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"

  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid()) // User ID (UUID-based)
  username    String      @unique
  createdAt   DateTime    @default(now())

  credentials Credential[] // Relationship: One user can have many credentials
  answers     Answer[]      // one user has many answers
  comments    Comments[]    // one user has many comments
  following   Connections[] @relation("Following")
  followedBy  Connections[] @relation("FollowedBy")
  requester   PendingConnections[] @relation("Requester")
  requested   PendingConnections[] @relation("Requested")
}

model Credential {
  id            String   @id @default(uuid()) // Internal DB ID
  userId        String   @unique // Every credential is linked to a specific user
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  credentialId  String   @unique // WebAuthn credential identifier
  publicKey     Bytes
  counter       Int      @default(0)
  
  @@index([credentialId])
  @@index([userId])
}

model Question {
  id            String   @id @default(uuid()) // Internal DB ID
  dateKey       DateTime @unique            // only one question per dateKey
  question      String                      // the question to be asked each dateKey
  answers       Answer[]                   // one question holds many answers
}


model Answer {
  id            String   @id @default(uuid()) // Internal DB ID
  userId        String   // Every answer is linked to a specific user
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  answerText    String    // the answer to the question
  questionId    String? 
  question      Question? @relation(fields: [questionId], references: [id]) // connect on id to questions
  comments      Comments[]  // one post can have many comments
}

model Connections {
  followingId   String
  following     User    @relation("Following", fields: [followingId], references: [id])
  followedById  String  
  followedBy    User    @relation("FollowedBy", fields: [followedById], references: [id])

  @@id([followingId, followedById])
}

model PendingConnections {
  requesterId   String
  requester     User    @relation("Requester", fields: [requesterId], references: [id])
  requestedId   String
  requested     User    @relation("Requested", fields: [requestedId], references: [id])

  @@id([requesterId, requestedId])
}

model Comments {    // hold comments on answers
  commentId     String  @id @default(uuid()) // Internal DB ID
  commentText   String
  answerId      String?                        // id of the answer this is a comment to
  answer        Answer?  @relation(fields: [answerId], references: [id])
  userId        String
  user          User    @relation(fields: [userId], references: [id])

}
